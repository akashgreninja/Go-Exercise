1)setup Mutex and folder structure ✔️
2)Your application must have a blueprint called mod_ip (read about flask blueprints)=> basic structure ✔️
3)Ping in Golang =>https://stackoverflow.com/questions/31868639/how-to-ping-an-ip-address-in-golang ✔️
4)Writing=>https://pkg.go.dev/os and for appending https://pkg.go.dev/os#pkg-overview ✔️
5)Append to a file not replace it ✔️
5) use regex to match the latency in the api endpoint (will become toocomplex using for) 



Phase 2

1)  Test all the cases from chatgpt geenrated testcases.txt ✔️ 

Phase 3
3)Create models for jobs 
4)do_get_jobs: will be called by API 3a to get all the jobs.
do_get_job(jobId): will be called by API 3b. To get specific job.
Define do_create_job(data={}) that will be used by API 3c.

5) setup a orm or base sql => database/sql package setup



Phase 4
6)i think should happen is when we send the job to db
next the user queries the id and as soon as he sends it to the celeb worker he it must update to job running and calculations must be performed at the end of this it mus show job  has been done and data must be stored back in the db